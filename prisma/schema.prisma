// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    addedMenuItems MenuItem[]
    orders         Order[]
    BookedPlace    BookedPlace[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}


// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema




model MenuItem {
  id            String          @id @default(uuid())
  name          String
  price         Decimal
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now()) @updatedAt
  addedBy       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  available     Boolean         @default(true)
  numberOfItems Int             @default(10)
  images        MenuItemImage[]
}

model MenuItemImage {
  url        String
  id         String   @id
  item       MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  menuItemId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}

enum OrderPaymentMethods {
  cash
  visaCard
  paypel
}

model Order {
  id            String              @id @default(uuid())
  items         OrderItem[]
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @default(now()) @updatedAt
  orderdBy      User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  paymentMethod OrderPaymentMethods @default(visaCard)
}

model OrderItem {
  id        String   @id @default(uuid())
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  order     Order?   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String?
}

model BookedPlace {
  id            String   @id @default(uuid())
  bookedBy      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  startsAt      DateTime
  numberOfHours Int      @default(2)
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
}
