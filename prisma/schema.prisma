// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRoles {
  admin
  customer
  restaurant

}
model User {
  id             String        @id @default(cuid())
  name           String?
  email          String?       @unique
  emailVerified  DateTime?
  role           UserRoles
  image          String?       @db.Text
  accounts       Account[]
  sessions       Session[]
  addedMenuItems MenuItem[]
  orders         Order[]
  BookedPlace    BookedPlace[]
  Reservation    Reservation[]
  Table          Table[]
  password String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

model MenuCategory {
  id        String   @id @default(uuid())
  name      String
  image     String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  items MenuItem[]
}

model MenuItem {
  id             String          @id @default(uuid())
  name           String
  price          Decimal
  description    String          @db.Text
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now()) @updatedAt
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  available      Boolean         @default(true)
  numberOfItems  Int             @default(10)
  category       MenuCategory    @relation(fields: [menuCategoryId], references: [id], onDelete: Cascade)
  image          String?         @db.Text
  images         MenuItemImage[]
  menuCategoryId String
}

model MenuItemImage {
  url        String
  id         String   @id
  item       MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  menuItemId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}

enum OrderPaymentMethods {
  cash
  visaCard
  paypel
}

model Order {
  id            String              @id @default(uuid())
  items         OrderItem[]
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @default(now()) @updatedAt
  orderdBy      User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  paymentMethod OrderPaymentMethods @default(visaCard)
}

model OrderItem {
  id        String   @id @default(uuid())
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  order     Order?   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String?
}

model BookedPlace {
  id            String   @id @default(uuid())
  bookedBy      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  startsAt      DateTime
  numberOfHours Int      @default(2)
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
}

enum ReservationHours {
  TWO_POINT_FIVE
  THREE
  THREE_POINT_FIVE
  FOUR
  FOUR_POINT_FIVE
  FIVE
  FIVE_POINT_FIVE
}

model Table {
  id          String        @id
  user        User          @relation(fields: [userId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt
  number      Int
  userId      String
  Reservation Reservation[]
  booked      Boolean       @default(false)
}

model Reservation {
  id            String           @id @default(uuid())
  date          DateTime         @default(now())
  user          User             @relation(fields: [userId], references: [id])
  userId        String
  table         Table            @relation(fields: [tableId], references: [id])
  tableId       String
  numberOfHours ReservationHours @default(TWO_POINT_FIVE)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @default(now()) @updatedAt
}
